package com.pedgog.web.common;

import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

import java.util.NoSuchElementException;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BasePageAction {
	
	WebDriver driver;

	protected void waitForElementToBeClickable(WebElement element)
	{
		new WebDriverWait(driver, 60).withMessage("element is not clickable").ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class).until(ExpectedConditions.elementToBeClickable(element));
	}


	protected void waitForElementToBeInvisible(By by, long duration)
	{
		new WebDriverWait(driver, duration).withMessage("element is visible")
				.until(ExpectedConditions.invisibilityOfElementLocated(by));
	}

	protected void waitForElementToBeVisible(WebElement element, long duration)
	{
		new WebDriverWait(driver, duration).withMessage("element is not visible").ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class).until(ExpectedConditions.visibilityOf(element));
	}

	protected void waitForElementToBeVisible(WebElement element)
	{
		if (!(driver instanceof EdgeDriver))
			waitForElementToBeVisible(element, 35);
	}

	protected void clickElementIfVisible(WebElement element)
	{
		waitForElementToBeVisible(element);
		element.click();
	}

	protected void clearText(WebElement element)
	{
		try
		{
			while (element.getAttribute("value").length() > 0)
			{
				insertKeyPress(element, Keys.BACK_SPACE);
			}
			new WebDriverWait(driver, 1).ignoring(NoSuchElementException.class)
					.ignoring(StaleElementReferenceException.class)
					.until(ExpectedConditions.attributeToBe(element, "value", ""));
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		element.clear();
	}

	public boolean isElementVisible(WebElement element, int timeOut)
	{
		return new WebDriverWait(driver, timeOut).withMessage("element is not visible")
				.until(ExpectedConditions.visibilityOf(element)).isDisplayed();
	}


	public void isTextOnPage(String pattern)
	{
		new WebDriverWait(driver, 15).withMessage("body is not located")
				.until(ExpectedConditions.presenceOfElementLocated(By.tagName("body")));
		Document doc = Jsoup.parse(driver.getPageSource());
		assertTrue(doc.text().contains(pattern), pattern + " cannot be found");
	}

	public void isTextNotOnPage(String pattern)
	{
		new WebDriverWait(driver, 15).withMessage("body is not located")
				.until(ExpectedConditions.presenceOfElementLocated(By.tagName("body")));
		Document doc = Jsoup.parse(driver.getPageSource());
		assertFalse(doc.text().contains(pattern),pattern + " can be found");
	}

	public boolean isTextOnPage(String pattern, int timeout)
	{
		new WebDriverWait(driver, timeout).withMessage("body is not located")
				.until(ExpectedConditions.presenceOfElementLocated(By.tagName("body")));
		Document doc = Jsoup.parse(driver.getPageSource());
		return doc.text().contains(pattern);
	}

	public boolean elementHasText(WebElement we, String text)
	{
		new WebDriverWait(driver, 15).withMessage("element is not visible").until(ExpectedConditions.visibilityOf(we));
		return we.getText().contains(text);
	}


public void clearElement(WebElement element)
	{
		new WebDriverWait(driver, 15).withMessage("element is not clickable")
				.until(ExpectedConditions.elementToBeClickable(element));
		element.clear();
	}


	public void mouseOverElement(WebElement element)
	{
		Actions actions = new Actions(driver);
		new WebDriverWait(driver, 15).withMessage("element is not visible")
				.until(ExpectedConditions.visibilityOf(element));
		actions.moveToElement(element);
		actions.build().perform();
	}

	
	
}
